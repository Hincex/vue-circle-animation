{"remainingRequest":"/Users/vincehe/code/github/vue-circle-animation/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vincehe/code/github/vue-circle-animation/src/components/canvasCircle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/vincehe/code/github/vue-circle-animation/src/components/canvasCircle.vue","mtime":1561187643923},{"path":"/Users/vincehe/code/github/vue-circle-animation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vincehe/code/github/vue-circle-animation/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/vincehe/code/github/vue-circle-animation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vincehe/code/github/vue-circle-animation/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n  data () {\n    return {\n      //canvas实例\n      context: '',\n      cirX: '',\n      cirY: '',\n      rad: '',\n      n: 1,\n      r: this.width/2,\n      fontSize: this.width * (40 / 136),\n    }\n  },\n  props:{\n    //传入百分比\n    percent: {\n      default: 0,\n      type: Number\n    },\n    //显示单位\n    unit: {\n      default: '%',\n      type: String\n    },\n    //传入id\n    id: {\n      default: 0,\n      type: Number\n    },\n    //圆环宽度\n    width: {\n      default: 136,\n      type: Number\n    },\n    //圆环高度\n    height: {\n      default: 136,\n      type: Number\n    },\n    //外圆环粗细\n    ringR: {\n      default: 17,\n      type:Number\n    },\n    //动画速度\n    speed: {\n      default:0.4,\n      type: Number\n    }\n  },\n  //元素挂载后开始绘制并且获取\n  mounted () {\n    this.canvas = document.getElementById(this.id);\n    this.context = this.canvas.getContext(\"2d\");\n    //所有圆的圆心坐标\n    this.cirX = this.width / 2;\n    this.cirY = this.height / 2;\n    this.rad = Math.PI * 2 / 100;\n    this.DreamLoading()\n  },\n  methods:{\n    //绘制最外层细圈\n    drawRing(){\n        this.context.save();         //save和restore保证样式属性只运用于该段canvas元素\n        this.context.beginPath();    //开始路径\n        this.context.strokeStyle = \"#eceef3\";       //设置边线的颜色\n        this.context.lineWidth = this.ringR;\n        this.context.arc(this.cirX, this.cirY, this.r-this.context.lineWidth/2, 0, Math.PI * 2, false);      //画一个圆的路径\n        this.context.stroke();       //绘制边线\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制中心白圆\n    drawCenterWhite(){\n        this.context.save();         //save和restore可以保证样式属性只运用于该段canvas元素\n        this.context.shadowColor = \"#c0c0c0\";\n        this.context.shadowBlur = 8;\n        this.context.shadowOffsetX = 0;\n        this.context.shadowOffsetY = 0;\n        this.context.beginPath();\n        this.context.arc(this.cirX, this.cirY, this.r - this.ringR, 0, Math.PI * 2, false);      //画一个圆的路径\n        this.context.fillStyle = \"#fff\";       //设置填充颜色  \n        this.context.fill();\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制渐变外圈\n    drawGradient(n){\n        let angle = 2 * Math.PI + Math.PI/2 - this.rad * n;\n        let xPos = Math.cos(angle) * (this.r-this.ringR/2) + this.width/2;\n        let yPos = -Math.sin(angle) * (this.r-this.ringR/2) + this.height/2;\n        this.context.save();\n        let grd = this.context.createLinearGradient(this.width/2,0,0,this.height);\n        grd.addColorStop(0, \"#00d3a4\");\n        grd.addColorStop(0.5, \"#14c7ca\");\n        grd.addColorStop(1, \"#14c7ca\");\n        this.context.strokeStyle=grd;\n        this.context.lineWidth = this.ringR;\n        this.context.lineCap = 'round';\n        this.context.beginPath();\n        this.context.arc(this.cirX, this.cirY, this.r-this.context.lineWidth/2, -Math.PI/2,-Math.PI/2 + this.rad*n, false);\n        this.context.stroke();\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制文本\n    drawText(n){\n        this.context.save();\n        this.context.font =  this.fontSize + 'px' + ' Arial';\n        this.context.fillStyle = \"#000\"; //字体颜色\n        this.context.fillText(n.toFixed(0),this.cirX - this.fontSize / 1.5,this.cirY + this.fontSize/2.5); //绘制数字\n        this.context.font =  this.fontSize * 0.5 + 'px' + ' Arial';\n        this.context.fillText(this.unit,this.cirX + this.fontSize * 0.5,this.cirY + this.fontSize/3); //绘制单位\n        this.context.restore();\n    },\n    //绘制渐变外圈上的小白圆\n    drawOuterWhite(n){\n        let angle = 2 * Math.PI + Math.PI/2 - this.rad * n;\n        let xPos = Math.cos(angle) * (this.r-this.ringR/2) + this.width/2;\n        let yPos = -Math.sin(angle) * (this.r-this.ringR/2) + this.height/2;\n        this.context.save();\n        this.context.beginPath();\n        this.context.arc(xPos,yPos,this.ringR/3,0,Math.PI * 2,false);\n        this.context.fillStyle = '#fff';\n        this.context.fill();\n        this.context.closePath();\n        this.context.restore();\n    },  \n    DreamLoading(){\n        //清除所有,重新绘制\n        this.context.clearRect(0,0,this.width,this.height);\n        this.drawRing();\n        this.drawCenterWhite();\n        this.drawGradient(this.n);\n        this.drawText(this.n);\n        this.drawOuterWhite(this.n);\n        //数字变化\n        if(this.n <= this.percent){\n            this.n = this.n + this.speed;\n        }else {\n          return this.n = 0;\n        }\n        //实现逐帧动画效果\n        requestAnimationFrame(this.DreamLoading);\n    }\n  }\n}\n",{"version":3,"sources":["canvasCircle.vue"],"names":[],"mappingsfile":"canvasCircle.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <canvas :id=\"id\" :width=\"width\" :height=\"height\"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      //canvas实例\n      context: '',\n      cirX: '',\n      cirY: '',\n      rad: '',\n      n: 1,\n      r: this.width/2,\n      fontSize: this.width * (40 / 136),\n    }\n  },\n  props:{\n    //传入百分比\n    percent: {\n      default: 0,\n      type: Number\n    },\n    //显示单位\n    unit: {\n      default: '%',\n      type: String\n    },\n    //传入id\n    id: {\n      default: 0,\n      type: Number\n    },\n    //圆环宽度\n    width: {\n      default: 136,\n      type: Number\n    },\n    //圆环高度\n    height: {\n      default: 136,\n      type: Number\n    },\n    //外圆环粗细\n    ringR: {\n      default: 17,\n      type:Number\n    },\n    //动画速度\n    speed: {\n      default:0.4,\n      type: Number\n    }\n  },\n  //元素挂载后开始绘制并且获取\n  mounted () {\n    this.canvas = document.getElementById(this.id);\n    this.context = this.canvas.getContext(\"2d\");\n    //所有圆的圆心坐标\n    this.cirX = this.width / 2;\n    this.cirY = this.height / 2;\n    this.rad = Math.PI * 2 / 100;\n    this.DreamLoading()\n  },\n  methods:{\n    //绘制最外层细圈\n    drawRing(){\n        this.context.save();         //save和restore保证样式属性只运用于该段canvas元素\n        this.context.beginPath();    //开始路径\n        this.context.strokeStyle = \"#eceef3\";       //设置边线的颜色\n        this.context.lineWidth = this.ringR;\n        this.context.arc(this.cirX, this.cirY, this.r-this.context.lineWidth/2, 0, Math.PI * 2, false);      //画一个圆的路径\n        this.context.stroke();       //绘制边线\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制中心白圆\n    drawCenterWhite(){\n        this.context.save();         //save和restore可以保证样式属性只运用于该段canvas元素\n        this.context.shadowColor = \"#c0c0c0\";\n        this.context.shadowBlur = 8;\n        this.context.shadowOffsetX = 0;\n        this.context.shadowOffsetY = 0;\n        this.context.beginPath();\n        this.context.arc(this.cirX, this.cirY, this.r - this.ringR, 0, Math.PI * 2, false);      //画一个圆的路径\n        this.context.fillStyle = \"#fff\";       //设置填充颜色  \n        this.context.fill();\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制渐变外圈\n    drawGradient(n){\n        let angle = 2 * Math.PI + Math.PI/2 - this.rad * n;\n        let xPos = Math.cos(angle) * (this.r-this.ringR/2) + this.width/2;\n        let yPos = -Math.sin(angle) * (this.r-this.ringR/2) + this.height/2;\n        this.context.save();\n        let grd = this.context.createLinearGradient(this.width/2,0,0,this.height);\n        grd.addColorStop(0, \"#00d3a4\");\n        grd.addColorStop(0.5, \"#14c7ca\");\n        grd.addColorStop(1, \"#14c7ca\");\n        this.context.strokeStyle=grd;\n        this.context.lineWidth = this.ringR;\n        this.context.lineCap = 'round';\n        this.context.beginPath();\n        this.context.arc(this.cirX, this.cirY, this.r-this.context.lineWidth/2, -Math.PI/2,-Math.PI/2 + this.rad*n, false);\n        this.context.stroke();\n        this.context.closePath();\n        this.context.restore();\n    },\n    //绘制文本\n    drawText(n){\n        this.context.save();\n        this.context.font =  this.fontSize + 'px' + ' Arial';\n        this.context.fillStyle = \"#000\"; //字体颜色\n        this.context.fillText(n.toFixed(0),this.cirX - this.fontSize / 1.5,this.cirY + this.fontSize/2.5); //绘制数字\n        this.context.font =  this.fontSize * 0.5 + 'px' + ' Arial';\n        this.context.fillText(this.unit,this.cirX + this.fontSize * 0.5,this.cirY + this.fontSize/3); //绘制单位\n        this.context.restore();\n    },\n    //绘制渐变外圈上的小白圆\n    drawOuterWhite(n){\n        let angle = 2 * Math.PI + Math.PI/2 - this.rad * n;\n        let xPos = Math.cos(angle) * (this.r-this.ringR/2) + this.width/2;\n        let yPos = -Math.sin(angle) * (this.r-this.ringR/2) + this.height/2;\n        this.context.save();\n        this.context.beginPath();\n        this.context.arc(xPos,yPos,this.ringR/3,0,Math.PI * 2,false);\n        this.context.fillStyle = '#fff';\n        this.context.fill();\n        this.context.closePath();\n        this.context.restore();\n    },  \n    DreamLoading(){\n        //清除所有,重新绘制\n        this.context.clearRect(0,0,this.width,this.height);\n        this.drawRing();\n        this.drawCenterWhite();\n        this.drawGradient(this.n);\n        this.drawText(this.n);\n        this.drawOuterWhite(this.n);\n        //数字变化\n        if(this.n <= this.percent){\n            this.n = this.n + this.speed;\n        }else {\n          return this.n = 0;\n        }\n        //实现逐帧动画效果\n        requestAnimationFrame(this.DreamLoading);\n    }\n  }\n}\n</script>\n<style scoped>\n</style>\n"]}]}